name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '22'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Tests and Quality Checks - Using Container Approach
  frontend-quality:
    name: Frontend Quality & Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create .env file
      run: |
        cp .env.example .env || echo "SECRET_KEY=test-secret-key" > .env
        echo "ALGORITHM=HS256" >> .env
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> .env
        echo "REGISTRATION_ENABLED=false" >> .env

    - name: Build and start services
      run: |
        docker-compose -f docker-compose.dev.yml up -d --build
        # Wait for services to be ready
        sleep 30

    - name: Install Task runner
      run: |
        sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

    - name: Run frontend type checking
      run: task frontend:type-check

    - name: Run frontend linting
      run: task frontend:lint

    - name: Run frontend format check
      run: |
        docker-compose -f docker-compose.dev.yml run --rm frontend npm run format:check

    - name: Run frontend full check
      run: |
        docker-compose -f docker-compose.dev.yml run --rm frontend npm run check

    - name: Run frontend tests with coverage
      run: |
        docker-compose -f docker-compose.dev.yml run --rm frontend npm run test:coverage

    - name: Upload frontend coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Build frontend application
      run: task frontend:build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7

    - name: Cleanup
      if: always()
      run: docker-compose -f docker-compose.dev.yml down -v

  # Backend Tests and Quality Checks - Using Container Approach
  backend-quality:
    name: Backend Quality & Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create .env file
      run: |
        cp .env.example .env || echo "SECRET_KEY=test-secret-key" > .env
        echo "ALGORITHM=HS256" >> .env
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> .env
        echo "REGISTRATION_ENABLED=false" >> .env
        echo "DB_USER=postgres" >> .env
        echo "DB_PASSWORD=postgres" >> .env
        echo "DB_HOST=db" >> .env
        echo "DB_PORT=5432" >> .env
        echo "DB_NAME=cat_weight_tracker_test" >> .env

    - name: Install Task runner
      run: |
        sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

    - name: Build and start services
      run: |
        docker-compose -f docker-compose.dev.yml up -d --build
        # Wait for database to be ready
        sleep 30

    - name: Run backend linting
      run: task backend:lint

    - name: Run backend tests with coverage
      run: task backend:test ARGS="--cov=app --cov-report=xml --cov-report=html"

    - name: Copy coverage files from container
      run: |
        docker-compose -f docker-compose.dev.yml run --rm backend cp coverage.xml /tmp/coverage.xml || true
        docker cp $(docker-compose -f docker-compose.dev.yml ps -q backend):/app/coverage.xml ./backend/coverage.xml || true

    - name: Upload backend coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Cleanup
      if: always()
      run: docker-compose -f docker-compose.dev.yml down -v

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Task runner
      run: |
        sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

    - name: Run security audits
      run: task security

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build and Test
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Task runner
      run: |
        sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

    - name: Create .env file
      run: |
        cp .env.example .env || echo "SECRET_KEY=test-secret-key" > .env
        echo "ALGORITHM=HS256" >> .env
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> .env
        echo "REGISTRATION_ENABLED=false" >> .env

    - name: Build and test with Task
      run: |
        task launch ENV=dev
        sleep 30
        task status
        
        # Test that services are responding
        curl -f http://localhost:3000/ || exit 1
        curl -f http://localhost:4000/ || exit 1
        
        task stop ENV=dev

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Task runner
      run: |
        sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

    - name: Setup test environment
      run: |
        cp .env.example .env || echo "SECRET_KEY=test-secret-key" > .env
        echo "ALGORITHM=HS256" >> .env
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> .env
        echo "REGISTRATION_ENABLED=false" >> .env

    - name: Start services using Task
      run: task launch ENV=dev

    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:4000/; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:3000/; do sleep 2; done'

    - name: Run integration tests
      run: |
        # Test API health
        curl -f http://localhost:4000/ || exit 1
        
        # Test frontend is serving
        curl -f http://localhost:3000/ || exit 1
        
        # Test API endpoints
        curl -f http://localhost:4000/auth/registration-status || exit 1

    - name: Check application logs
      if: failure()
      run: task logs

    - name: Cleanup
      if: always()
      run: task stop ENV=dev

  # Run all tests using Task (matches local development exactly)
  unified-tests:
    name: Unified Tests (Local Parity)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Task runner
      run: |
        sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

    - name: Create .env file
      run: |
        cp .env.example .env || echo "SECRET_KEY=test-secret-key" > .env
        echo "ALGORITHM=HS256" >> .env
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> .env
        echo "REGISTRATION_ENABLED=false" >> .env

    - name: Run all tests (exactly like local)
      run: |
        # This matches exactly what you run locally
        task test ENV=dev

    - name: Run all linting (exactly like local)
      run: |
        # This matches exactly what you run locally
        task lint ENV=dev

    - name: Cleanup
      if: always()
      run: task clean

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [unified-tests, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy notification
      run: |
        echo "ðŸš€ Deployment would happen here"
        echo "âœ… All quality checks passed"
        echo "ðŸ“¦ Container-based testing completed"
        echo "ðŸ”’ Security scans completed"
        echo "ðŸŽ¯ Local and CI environments are now identical"
