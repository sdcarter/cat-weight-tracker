version: '3'

includes:
  frontend: ./frontend/Taskfile.yml
  backend: ./backend/Taskfile.yml
  mcp: ./mcp/Taskfile.yml
  db: ./db/Taskfile.yml

default:
  desc: Show available tasks
  cmds:
    - task --list

tasks:
  pull-images:
    desc: Pull required Docker images
    cmds:
      - docker pull postgres:15
      - docker pull node:18-alpine
      - docker pull nginx:alpine
      - docker pull python:3.11-slim

  launch:
    desc: Launch the application in specified environment (prod or dev)
    cmds:
      - task: pull-images
      - echo "Starting Cat Weight Tracker in {{.ENV}} mode..."
      - |
        if [ "{{.ENV}}" = "dev" ]; then
          # For dev, only start the services that are needed
          docker-compose -f docker-compose.dev.yml up --build -d
        else
          docker-compose {{if eq .ENV "dev"}}-f docker-compose.dev.yml{{end}} up --build -d
        fi
      - sleep 5
      - echo "Application started in {{.ENV}} mode"
      - |
        if [ "{{.ENV}}" = "dev" ]; then
          echo "- Frontend: http://localhost:3000"
        else
          echo "- Frontend: http://localhost:80"
        fi
        echo "- Backend API: http://localhost:4000"
    vars:
      ENV: '{{.ENV | default "prod"}}'

  stop:
    desc: Stop the application in specified environment
    cmds:
      - docker-compose {{if eq .ENV "dev"}}-f docker-compose.dev.yml{{end}} down
    vars:
      ENV: '{{.ENV | default "prod"}}'

  logs:
    desc: Show logs for all or specific service
    cmds:
      - docker-compose {{if eq .ENV "dev"}}-f docker-compose.dev.yml{{end}} logs {{.SERVICE}} {{.FOLLOW}}
    vars:
      ENV: '{{.ENV | default "prod"}}'
      SERVICE: '{{.SERVICE | default ""}}'
      FOLLOW: '{{if .FOLLOW}}-f{{end}}'

  lint:
    desc: Run all linting checks
    cmds:
      - task: frontend:lint
      - task: backend:lint
    vars:
      ENV: '{{.ENV | default "prod"}}'

  lint-fix:
    desc: Run all linting fixes
    cmds:
      - task: frontend:lint-fix
    vars:
      ENV: '{{.ENV | default "prod"}}'

  test:
    desc: Run all tests
    cmds:
      - echo "Running all tests..."
      - task: frontend:test
      - task: backend:test
    vars:
      ENV: '{{.ENV | default "prod"}}'

  shell:
    desc: Open a shell in a service container
    cmds:
      - docker-compose {{if eq .ENV "dev"}}-f docker-compose.dev.yml{{end}} exec {{.SERVICE}} sh
    vars:
      ENV: '{{.ENV | default "prod"}}'
      SERVICE: '{{.SERVICE | default "backend"}}'

  release:
    desc: Create a new release with automated semantic versioning
    cmds:
      - |
        # Get current version from package.json
        CURRENT_VERSION=$(grep '"version":' package.json | cut -d'"' -f4)
        echo "Current version: v$CURRENT_VERSION"
        
        # Determine bump type based on commit messages
        determine_bump_type() {
          # Get all commits since the last tag
          local commits=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%s")
          
          # Check for breaking changes or feat commits
          if echo "$commits" | grep -q "BREAKING CHANGE" || echo "$commits" | grep -q "!:"; then
            echo "major"
          elif echo "$commits" | grep -q "^feat"; then
            echo "minor"
          else
            echo "patch"
          fi
        }
        
        # If type is provided, use it; otherwise determine automatically
        if [ -n "{{.TYPE}}" ]; then
          BUMP_TYPE="{{.TYPE}}"
        else
          BUMP_TYPE=$(determine_bump_type)
          echo "Detected change type: $BUMP_TYPE"
        fi
        
        # Parse current version
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # Calculate new version
        case $BUMP_TYPE in
          major)
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          minor)
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
            ;;
          patch|*)
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            ;;
        esac
        
        echo "New version: v$NEW_VERSION"
        
        # Update version in package.json
        sed -i.bak "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json
        rm package.json.bak
        
        # Generate changelog entry
        DATE=$(date +%Y-%m-%d)
        TEMP_FILE=$(mktemp)
        
        # Write header to temp file
        echo "# Changelog" > $TEMP_FILE
        echo "" >> $TEMP_FILE
        echo "All notable changes to this project will be documented in this file." >> $TEMP_FILE
        echo "" >> $TEMP_FILE
        echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> $TEMP_FILE
        echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> $TEMP_FILE
        echo "" >> $TEMP_FILE
        
        # Add new version section
        echo "## [v$NEW_VERSION] - $DATE" >> $TEMP_FILE
        echo "" >> $TEMP_FILE
        
        # Add features
        FEATURES=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%s" | grep "^feat" | sed 's/feat: /- /' | sed 's/feat(\([^)]*\)): /- /')
        if [ ! -z "$FEATURES" ]; then
          echo "### Features" >> $TEMP_FILE
          echo "" >> $TEMP_FILE
          echo "$FEATURES" >> $TEMP_FILE
          echo "" >> $TEMP_FILE
        fi
        
        # Add fixes
        FIXES=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%s" | grep "^fix" | sed 's/fix: /- /' | sed 's/fix(\([^)]*\)): /- /')
        if [ ! -z "$FIXES" ]; then
          echo "### Bug Fixes" >> $TEMP_FILE
          echo "" >> $TEMP_FILE
          echo "$FIXES" >> $TEMP_FILE
          echo "" >> $TEMP_FILE
        fi
        
        # Add other changes
        OTHER=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%s" | grep -v "^feat" | grep -v "^fix" | grep -v "^docs" | grep -v "^chore" | grep -v "^test" | grep -v "^ci" | grep -v "^style" | grep -v "^refactor" | sed 's/^/- /')
        if [ ! -z "$OTHER" ]; then
          echo "### Other Changes" >> $TEMP_FILE
          echo "" >> $TEMP_FILE
          echo "$OTHER" >> $TEMP_FILE
          echo "" >> $TEMP_FILE
        fi
        
        # Read existing changelog
        if [ -f "CHANGELOG.md" ]; then
          tail -n +2 "CHANGELOG.md" >> $TEMP_FILE
        fi
        
        # Replace changelog
        mv $TEMP_FILE CHANGELOG.md
        
        # Commit changes
        git add package.json CHANGELOG.md
        git commit -m "chore: bump version to v$NEW_VERSION"
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        
        echo "âœ… Version bumped to v$NEW_VERSION"
        echo "To push changes and tag, run: git push && git push --tags"
    vars:
      TYPE: '{{.TYPE | default ""}}'